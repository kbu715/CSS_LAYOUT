$flex-map: (
  // map(scss) key-value format
  start: flex-start,
  end: flex-end,
  between: space-between,
  around: space-around,
  stretch: stretch,
  center: center
);

@function _get-flex-value($key) {
  @return map-get($flex-map, $key); //map-get()
}

@mixin flexbox($jc: center, $ai: center) {
  display: flex;
  align-items: _get-flex-value($ai);
  justify-content: _get-flex-value($jc);
}

@mixin inline-flexbox($jc: center, $ai: center) {
  display: inline-flex;
  align-items: _get-flex-value($ai);
  justify-content: _get-flex-value($jc);
}

@mixin column-flexbox($jc: center, $ai: center) {
  display: flex;
  flex-direction: column;
  align-items: _get-flex-value($ai);
  justify-content: _get-flex-value($jc);
}

@mixin link($color) {
    text-decoration: none;
    color: $color;
}

@mixin linkByWord($word) {
    @if $word == 'odd' {
        color: red;
    } @else {
        color: green;
    }
}

$minIphone: 500px;
$maxIphone: 690px;
$minTablet: $minIphone + 1;
$maxTablet: 1120px;

@mixin responsive($device) {
  @if $device == 'iphone' { 
    @media screen and (min-width: $minIphone) and (max-width: $maxIphone) {
      @content;
    }
  } @else if $device == 'tablet' {
    @media screen and (min-width: $minTablet) and (max-width: $maxTablet) {
      @content;
    }
  } @else if $device == 'iphone-l' { // iphone-landscape (아이폰 가로모드), portrait (세로모드)
      @media screen and (min-width: $minIphone) and (max-width: $maxIphone) and (orientation: landscape) {
        @content;
      }
  } @else if $device == 'ipad-l' {
    @media screen and (min-width: $minTablet) and (max-width: $maxTablet) and (orientation: landscape) {
      @content;
    }
  }
}